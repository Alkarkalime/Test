{"version":3,"file":"static/js/955.2ad2c27e.chunk.js","mappings":"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","sources":["views/utilities/people/components/LoginForm/ModalExcel/ModalExcel.tsx","views/utilities/people/components/LoginForm/ExcelForm.tsx","views/utilities/people/components/LoginForm/useHandlers.ts","views/utilities/people/useData.ts","views/utilities/people/people.tsx","views/utilities/people/useHandlers.ts"],"sourcesContent":["import {Button, MenuItem, Stack, TextField} from \"@mui/material\";\nimport {useState} from \"react\";\n\nexport const ModalExcel = (data: any, saveData: any) => {\n    const elements = ['position', 'rank', 'fullName'];\n    const header=data[0];\n    let dataForSave={\n        position:'', rank:'', fullName:''\n    }\n    const onChange = (e: any) => {\n        //@ts-ignore\n       dataForSave[e.target.name]=e.target.value;\n    }\n    const submit = () => {\n        saveData(dataForSave, data)\n    }\n    return (\n        <Stack sx={{width: '100%'}}>\n            {elements.map((element, index: number) => {\n                return <Stack direction='row' key={`excelElement${index}`}\n                              sx={{display: 'flex', justifyContent: 'space-evenly', padding: '1rem'}}>\n                    <TextField\n                        value={element}\n                        inputProps={\n                            {readOnly: true,}\n                        }\n                        sx={{padding: '1rem'}}>\n\n                    </TextField>\n                    <TextField\n                        id=\"demo-simple-select\"\n                        label=\"select column\"\n                        select\n                        onChange={onChange}\n                        sx={{padding: '1rem', width: '20rem'}}\n                        name={element}\n                    >{Object.keys(header).map((item: string) => <MenuItem  value={item}>{header[item]}</MenuItem>)}\n\n                    </TextField>\n                </Stack>\n            })}\n            <Button variant='contained' onClick={submit}>\n                Submit\n            </Button>\n        </Stack>\n    )\n}","import {\n    Button,\n    Paper,\n    Stack,\n    Table, TableBody, TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    TextField,\n    Typography,\n    useTheme\n} from '@mui/material';\nimport {Field, Form, useFormikContext} from 'formik';\nimport type {ReactElement} from 'react';\nimport {useHandlers} from './useHandlers';\nimport {TImport} from \"../../interfaces\";\nimport {read, utils} from \"xlsx\";\nimport {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {CLOSE_MODAL, LOAD_DATA, OPEN_MODAL, PARSE_DATA} from \"../../../../../store/actions\";\nimport {ModalExcel} from \"./ModalExcel/ModalExcel\";\n\nexport const ExcelForm = ({...props}): ReactElement => {\n    const {errors, touched, setFieldValue} = useFormikContext<TImport>();\n    const theme = useTheme();\n    const {handleClear} = useHandlers();\n    const dispatch = useDispatch();\n    const peoples = useSelector((state: any) => state.peoples);\n    useEffect(() => {\n        dispatch({type:LOAD_DATA})\n    }, []);\n    const saveData = (keys: { position: string, rank: string, fullName: string }, data: any) => {\n        const dataForSave = data.map((people: any, index: number) => {\n            if (index)\n                return {\n                    position: people[keys.position], rank: people[keys.rank], fullName: people[keys.fullName]\n                }\n        })\n        dataForSave.shift();\n        dispatch({\n            type: PARSE_DATA,\n            data: dataForSave\n        })\n        dispatch({\n            type: CLOSE_MODAL,\n            data: dataForSave\n        })\n    }\n    const onChange = useCallback((e: any) => {\n        e.preventDefault();\n        if (e.target.files) {\n            const reader = new FileReader();\n            reader.onload = (e: any) => {\n                const data = e.target.result;\n                const workbook = read(data, {type: \"array\"});\n                const sheetName = workbook.SheetNames[0];\n                const worksheet = workbook.Sheets[sheetName];\n                const json: any = utils.sheet_to_json(worksheet);\n                dispatch({\n                    type: OPEN_MODAL,\n                    opened: true,\n                    data: {\n                        title: 'select field',\n                        content: ModalExcel(json, saveData)\n                    }\n                })\n            };\n            reader.readAsArrayBuffer(e.target.files[0]);\n        }\n    }, [])\n    return (\n        <>\n            <Form {...props}>\n                <Stack direction=\"row\">\n                    <Field\n                        name='password'\n                        component={TextField}\n                        required\n                        errors={touched.excel && errors.excel}\n                        clear={handleClear}\n                        label={'chose file'}\n                        type={'file'}\n                        focused\n                        onChange={onChange}\n                    />\n                </Stack>\n\n\n            </Form>\n\n            <TableContainer component={Paper} sx={{ margin:'1rem',width:'97%'}}>\n                <Table sx={{minWidth: 300}} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n\n                            <TableCell align=\"right\">name</TableCell>\n                            <TableCell align=\"right\">rank</TableCell>\n                            <TableCell align=\"right\">position</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {peoples.data.map((people:any,index:number) => (\n                            <TableRow\n                                key={`tableRow${index}`}\n                                sx={{'&:last-child td, &:last-child th': {border: 0}}}\n                            >\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {people.fullName}\n                                </TableCell>\n                                <TableCell align=\"right\">{people.rank}</TableCell>\n                                <TableCell align=\"right\">{people.position}</TableCell>\n\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n};\n\n\n","import { useFormikContext } from 'formik';\nimport { useCallback } from 'react';\nimport {TImport} from \"../../interfaces\";\n\nexport function useHandlers(): { handleClear: () => void;  } {\n  const { setFieldValue } = useFormikContext<TImport>();\n\n  const handleClear= useCallback((): void => {\n    setFieldValue('excel', '');\n  }, [setFieldValue]);\n\n\n  return {  handleClear };\n}\n","import {TImport} from \"./interfaces\";\nimport {useMemo} from \"react\";\nimport * as Yup from 'yup';\n\nconst initialValues = { excel:'' };\n\n\nexport function useData(): { initialValues: TImport,useValidationSchema:any } {\n    const useValidationSchema =   useMemo(() => {\n        return Yup.object().shape({\n            excel: Yup.string()\n                .required('validations.required')\n        });\n    }, []);\n  return { initialValues,useValidationSchema };\n}\n","import PropTypes from 'prop-types';\nimport MuiTypography from '@mui/material/Typography';\n\n// material-ui\nimport {Box, Card, Grid, Link, Typography} from '@mui/material';\n\n// project imports\nimport SubCard from '../../../ui-component/cards/SubCard';\nimport MainCard from '../../../ui-component/cards/MainCard';\nimport SecondaryAction from '../../../ui-component/cards/CardSecondaryAction';\nimport {gridSpacing} from '../../../store/constant';\nimport {Formik} from \"formik\";\nimport {ExcelForm} from \"./components/LoginForm/ExcelForm\";\nimport {TImport} from \"./interfaces\";\nimport {useData} from \"./useData\";\nimport {useHandlers} from \"./useHandlers\";\n\n// ===============================|| COLOR BOX ||=============================== //\n\nconst People = () => {\n    const { handleSubmit } = useHandlers();\n    const { initialValues,useValidationSchema } = useData();\n    return (\n        <Formik<TImport>\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            validationSchema={useValidationSchema}\n            validateOnChange={false}>\n            <ExcelForm  />\n        </Formik>\n    )\n};\n\n\nexport default People;\n","import { useCallback } from 'react';\nimport {TImport} from \"./interfaces\";\n\nexport function useHandlers(): { handleSubmit: (data: TImport) => Promise<void>; } {\n\n\n  const handleSubmit = useCallback(\n    async (data: TImport): Promise<void> => {\n\n    },\n    [],\n  );\n\n  return { handleSubmit };\n}\n"],"names":["ModalExcel","data","saveData","header","dataForSave","position","rank","fullName","onChange","e","target","name","value","_jsxs","Stack","sx","width","children","map","element","index","direction","display","justifyContent","padding","_jsx","TextField","inputProps","readOnly","id","label","select","Object","keys","item","MenuItem","Button","variant","onClick","submit","ExcelForm","_ref","props","errors","touched","setFieldValue","useFormikContext","handleClear","useTheme","useCallback","useHandlers","dispatch","useDispatch","peoples","useSelector","state","useEffect","type","LOAD_DATA","people","shift","PARSE_DATA","CLOSE_MODAL","preventDefault","files","reader","FileReader","onload","result","workbook","read","sheetName","SheetNames","worksheet","Sheets","json","utils","sheet_to_json","OPEN_MODAL","opened","title","content","readAsArrayBuffer","_Fragment","Form","Field","component","required","excel","clear","focused","TableContainer","Paper","margin","Table","minWidth","TableHead","TableRow","TableCell","align","TableBody","border","scope","initialValues","useData","useValidationSchema","useMemo","Yup","shape","People","handleSubmit","async","Formik","onSubmit","validationSchema","validateOnChange"],"sourceRoot":""}