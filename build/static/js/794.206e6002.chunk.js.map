{"version":3,"file":"static/js/794.206e6002.chunk.js","mappings":"0QA+FA,UA5EkBA,KACd,MAAMC,GAAWC,EAAAA,EAAAA,OAEVC,EAAWC,IAAgBC,EAAAA,EAAAA,UAAc,CAC5CC,QAAS,IAAIC,KACbJ,UAAW,CAAC,CACRK,MAAO,SACPC,QAAQC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CACbF,OAAQG,IACRC,KAAK,sCAIT,CACIL,MAAO,SACPC,QACIC,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CACLF,OAAQG,IACRC,KAAK,yCAMnBC,GAAUC,EAAAA,EAAAA,KAAaC,GAAeA,EAAMF,WAClDG,EAAAA,EAAAA,YAAU,KACNhB,EAAS,CAACiB,KAAMC,EAAAA,IAAW,GAC5B,KACHF,EAAAA,EAAAA,YAAU,KACNG,QAAQC,IAAIlB,EAAU,GACvB,CAACA,IACJ,MAAMmB,GAAUC,EAAAA,EAAAA,cAAY,KAIxBtB,EAAS,CACLiB,KAAMM,EAAAA,GACNC,QAAQ,EACRZ,KAAM,CACFL,MAAO,eACPkB,QAASC,EAAab,EAAQD,MARvBe,WAUb,GACH,CAACd,IAEEe,GAAcN,EAAAA,EAAAA,cAAY,KAC5B,IAAIO,EAAe3B,EAAUA,UAC7B2B,EAAaC,OAAO5B,EAAUA,UAAU6B,OAAO,EAAG,EAAG,CACjDxB,MAAO,OACPC,QAAQwB,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EAAEzB,EAAAA,EAAAA,KAACC,EAAAA,SAAQ,CACfF,OAAQG,IACRC,KAAK,sCAEPH,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,QAAQ,YAAiDC,QAAShB,EAASiB,GAAI,CAACC,OAAQ,QAAQL,SAAC,aAAxEhC,EAAUA,UAAU6B,OAAS,QAKpE5B,EAAa,CACTD,UAAW2B,EAAcxB,QAAS,IAAIC,MACxC,GACH,CAACJ,IACJ,OACI8B,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACIzB,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,QAAQ,YAAYC,QAAST,EAAYM,SAAC,iBAI9ChC,EAAUA,UAAUsC,KAAI,CAACC,EAAeC,KAAkBV,EAAAA,EAAAA,MAACW,EAAAA,EAAI,CAC3DL,GAAI,CAACC,OAAQ,OAAQK,QAAS,QAAQV,SAAA,EAACzB,EAAAA,EAAAA,KAACoC,EAAAA,EAAU,CAAAX,SAAEO,EAASlC,QAAoBkC,EAASjC,cAGnG,EAMX,MAAMkB,EAAeA,CAAEd,EAASe,KAC5BR,QAAQC,IAAIR,GAQZ,OACIoB,EAAAA,EAAAA,MAACc,EAAAA,EAAK,CAACR,GAAI,CAACS,MAAO,QAAQb,SAAA,EACvBzB,EAAAA,EAAAA,KAACqC,EAAAA,EAAK,CAACE,UAAU,MAAKd,UAClBzB,EAAAA,EAAAA,KAACwC,EAAAA,EAAY,CACTC,aAAcA,CAACC,EAAOC,KAClB3C,EAAAA,EAAAA,KAAC4C,EAAAA,EAAG,CAACC,UAAU,KAAKhB,GAAI,CAAE,UAAW,CAAEiB,GAAI,EAAGC,WAAY,IAAMtB,SAC3DkB,EAAOK,WAGhBC,YAAcC,IAAWlD,EAAAA,EAAAA,KAACmD,EAAAA,EAAS,CAACC,MAAM,OAAOC,WAAY,IACtDH,EAAOG,WACVC,aAAc,kBAElBC,QAASpD,EACbqD,SAAWC,IAAK/C,QAAQC,IAAI8C,EAAE,OAGlCzD,EAAAA,EAAAA,KAAC0B,EAAAA,EAAM,CAACC,QAAQ,YAAYC,QApBrB8B,OAoBqCjC,SAAC,aAGzC,C","sources":["views/dashboard/Default/index.tsx"],"sourcesContent":["import {useCallback, useEffect, useState} from 'react';\nimport {CKEditor} from '@ckeditor/ckeditor5-react';\nimport ClassicEditor from '@ckeditor/ckeditor5-build-classic';\n// material-ui\nimport {Autocomplete, Box, Button, Card, Grid, MenuItem, Stack, TextField, Typography} from '@mui/material';\n// project imports\nimport EarningCard from './EarningCard';\nimport PopularCard from './PopularCard';\nimport TotalOrderLineChartCard from './TotalOrderLineChartCard';\nimport TotalIncomeDarkCard from './TotalIncomeDarkCard';\nimport TotalIncomeLightCard from './TotalIncomeLightCard';\nimport TotalGrowthBarChart from './TotalGrowthBarChart';\nimport {gridSpacing} from '../../../store/constant';\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {LOAD_DATA, OPEN_MODAL} from \"../../../store/actions\";\nimport {ModalExcel} from \"../../utilities/people/components/LoginForm/ModalExcel/ModalExcel\";\n\n// ==============================|| DEFAULT DASHBOARD ||============================== //\n\nconst Dashboard = () => {\n    const dispatch = useDispatch();\n\n    const [templates, setTemplates] = useState<any>({\n        updated: new Date(),\n        templates: [{\n            title: 'header',\n            editor: <CKEditor\n                editor={ClassicEditor}\n                data=\"<p>Hello from CKEditor&nbsp;5!</p>\"\n\n            />\n        },\n            {\n                title: 'footer',\n                editor:\n                    <CKEditor\n                        editor={ClassicEditor}\n                        data=\"<p>Hello from CKEditor&nbsp;5!</p>\"\n\n                    />\n            }\n        ]\n    })\n    const peoples = useSelector((state: any) => state.peoples);\n    useEffect(() => {\n        dispatch({type: LOAD_DATA})\n    }, []);\n    useEffect(() => {\n        console.log(templates)\n    }, [templates]);\n    const addUser = useCallback(() => {\n        const saveData=()=>{\n\n        }\n        dispatch({\n            type: OPEN_MODAL,\n            opened: true,\n            data: {\n                title: 'select field',\n                content: ModalAddUser(peoples.data,saveData)\n            }\n        })\n    }, [peoples])\n\n    const addTemplate = useCallback(() => {\n        let newTemplates = templates.templates;\n        newTemplates.splice(templates.templates.length-1, 0, {\n            title: 'body',\n            editor: <><CKEditor\n                editor={ClassicEditor}\n                data=\"<p>Hello from CKEditor&nbsp;5!</p>\"\n\n            /><Button variant='contained' key={templates.templates.length - 1} onClick={addUser} sx={{margin: '1rem'}}>\n                ADD USERS\n            </Button></>\n\n        })\n        setTemplates({\n            templates: newTemplates, updated: new Date(),\n        })\n    }, [templates])\n    return (\n        <>\n            <Button variant='contained' onClick={addTemplate}>\n                ADD TEMPLATE\n            </Button>\n            {\n                templates.templates.map((template: any, index: number) => <Card\n                    sx={{margin: '2rem', padding: '2rem'}}><Typography>{template.title}</Typography>{template.editor}\n                </Card>)\n            }\n        </>\n    );\n};\n\nexport default Dashboard;\n\nconst ModalAddUser = ( data:any,saveData: any) => {\n    console.log(data)\n    const onChange = (e: any) => {\n        //@ts-ignore\n        dataForSave[e.target.name] = e.target.value;\n    }\n    const submit = () => {\n     //   saveData(dataForSave, data)\n    }\n    return (\n        <Stack sx={{width: '100%'}}>\n            <Stack direction=\"row\">\n                <Autocomplete\n                    renderOption={(props, option:any) => (\n                        <Box component=\"li\" sx={{ '& > img': { mr: 2, flexShrink: 0 } }} >\n                            {option.fullName}\n                        </Box>\n                    )}\n                    renderInput={(params) => <TextField label=\"name\" inputProps={{\n                        ...params.inputProps,\n                        autoComplete: 'new-password', // disable autocomplete and autofill\n                    }}/>}\n                    options={data}\n                onChange={(e)=>{console.log(e)}}\n                />\n            </Stack>\n            <Button variant='contained' onClick={submit}>\n                Submit\n            </Button>\n        </Stack>\n    )\n}"],"names":["Dashboard","dispatch","useDispatch","templates","setTemplates","useState","updated","Date","title","editor","_jsx","CKEditor","ClassicEditor","data","peoples","useSelector","state","useEffect","type","LOAD_DATA","console","log","addUser","useCallback","OPEN_MODAL","opened","content","ModalAddUser","saveData","addTemplate","newTemplates","splice","length","_jsxs","_Fragment","children","Button","variant","onClick","sx","margin","map","template","index","Card","padding","Typography","Stack","width","direction","Autocomplete","renderOption","props","option","Box","component","mr","flexShrink","fullName","renderInput","params","TextField","label","inputProps","autoComplete","options","onChange","e","submit"],"sourceRoot":""}